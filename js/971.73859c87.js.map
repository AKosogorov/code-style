{"version":3,"file":"js/971.73859c87.js","mappings":"8XAgBA,MAAMA,GAASC,EAAAA,EAAAA,IAAI,MACbC,GAAQC,EAAAA,EAAAA,KAAS,KAAM,CAC3BC,MAAOJ,EAAOK,OAAOC,aAAe,S,0HCftC,MAAMC,EAAc,EAEpB,Q,khBCFA,MAAM,EAAc,EAEpB,QCHO,SAASC,IACd,MAAMC,GAAYR,EAAAA,EAAAA,KAAI,GAEtB,SAASS,IACPD,EAAUJ,OAAQ,CACpB,CAEA,SAASM,IACPF,EAAUJ,OAAQ,CACpB,CAEA,MAAO,CACLI,YACAC,eACAC,gBAEJ,C,YClBO,SAASC,IACd,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLC,KAAKC,SAAW,IAAKJ,IAEzBC,EAAO,IAAII,MAAM,wCAAwC,GACxD,IAAK,GAEZ,CCLO,SAASC,IACd,MAAMC,GAAQC,EAAAA,EAAAA,MAEdC,eAAeC,IACb,UACQZ,UACAS,EAAMI,SAAS,wBAAyB,kDAGhD,CAFE,MAAOC,SACDL,EAAMI,SAAS,sBAAuBC,EAAMC,QACpD,CACF,CAEA,MAAO,CAAEH,kBACX,C,+2IC0JA,MAAM,UAAEf,EAAS,aAAEC,EAAY,cAAEC,GAAkBH,KAC7C,gBAAEgB,GAAoBJ,IAE5BG,eAAeK,IACb,IACElB,UACMc,GAGR,CAFE,QACAb,GACF,CACF,C,m+BCjLA,MAAM,EAAc,EAEpB,O","sources":["webpack://code-style/./src/components/loaders/LoaderEllipsis.vue","webpack://code-style/./src/components/loaders/LoaderEllipsis.vue?8f1e","webpack://code-style/./src/components/ui/button/ButtonSubmit.vue","webpack://code-style/./src/use/useIsLoading.js","webpack://code-style/./src/mocks/mockRequest.js","webpack://code-style/./src/use/useMockRequest.js","webpack://code-style/./src/views/JSView.vue","webpack://code-style/./src/views/JSView.vue?e228"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"lds-ellipsis\"\r\n    ref=\"loader\"\r\n    :style=\"style\"\r\n  >\r\n    <div/>\r\n    <div/>\r\n    <div/>\r\n    <div/>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed, ref } from 'vue'\r\n\r\nconst loader = ref(null)\r\nconst style = computed(() => ({\r\n  width: loader.value?.offsetHeight + 'px'\r\n}))\r\n</script>\r\n","import script from \"./LoaderEllipsis.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./LoaderEllipsis.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./ButtonSubmit.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ButtonSubmit.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { ref } from 'vue'\r\n\r\nexport function useIsLoading () {\r\n  const isLoading = ref(false)\r\n\r\n  function startLoading () {\r\n    isLoading.value = true\r\n  }\r\n\r\n  function finishLoading () {\r\n    isLoading.value = false\r\n  }\r\n\r\n  return {\r\n    isLoading,\r\n    startLoading,\r\n    finishLoading\r\n  }\r\n}\r\n","export function mockRequest () {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (Math.random() > 0.5) resolve()\r\n\r\n      reject(new Error('Не удалось получить ответ от сервера'))\r\n    }, 2000)\r\n  })\r\n}\r\n","import { useStore } from 'vuex'\r\nimport { mockRequest } from '@/mocks/mockRequest'\r\n\r\nexport function useMockRequest () {\r\n  const store = useStore()\r\n\r\n  async function sendMockRequest () {\r\n    try {\r\n      await mockRequest()\r\n      await store.dispatch('alert/setAlertSuccess', 'Ваши конфиденциальные данные успешно отправлены')\r\n    } catch (error) {\r\n      await store.dispatch('alert/setAlertError', error.message)\r\n    }\r\n  }\r\n\r\n  return { sendMockRequest }\r\n}\r\n","<template>\r\n  <section>\r\n    <div class=\"container column gap-60\">\r\n      <div class=\"column gap-30\">\r\n        <h1>JavaScript</h1>\r\n\r\n        <p class=\"fsz20\">\r\n          На этой странице собраны рекомендации по JS.\r\n        </p>\r\n      </div>\r\n\r\n      <div class=\"column gap-30\">\r\n        <h2>Наименование переменных</h2>\r\n\r\n        <p>\r\n          Одна из самых трудных задач в жизни разработчика, это придумывание названий для переменных.\r\n          Очень важно подбирать хорошие названия. Это позволяет быстрее понимать, что делает код.\r\n          Название должно быть кратким, но в тоже время понятным и не превращаться в \"ниндзя код\".\r\n        </p>\r\n\r\n        <ImageLabel img-src=\"js/js-1.webp\" is-bad/>\r\n\r\n        <ImageLabel img-src=\"js/js-2.webp\" />\r\n      </div>\r\n\r\n      <div class=\"column gap-30\">\r\n        <h2>let, var, const</h2>\r\n\r\n        <p>\r\n          Для объявления переменных <b class=\"red\">не рекомендуется</b> использовать <b class=\"red\">var</b>.\r\n          Если переменная не изменяется, то ее следует объявлять через <b class=\"green\">const</b>,\r\n          в ином случае используется <b class=\"green\">let</b>.\r\n        </p>\r\n\r\n        <p>\r\n          Если переменная является массивом или объектом и планируется изменять их содержимое,\r\n          но не тип переменной или установку ссылки на другой объект, то такие переменные должны\r\n          быть объявлены через <b class=\"green\">const</b>.\r\n        </p>\r\n      </div>\r\n\r\n      <div class=\"column gap-30\">\r\n        <h2>Наименование функций</h2>\r\n\r\n        <p>\r\n          В названии функции должен быть глагол, который обозначает действие этой функции.\r\n          Желательно чтобы он был на первом месте. Хорошо если название функции не совпадает\r\n          с названиями стандартных методов объектов JS. Это позволяет быстро находить, где используется функция,\r\n          при поиске по проекту.\r\n        </p>\r\n\r\n        <p>\r\n          Например, если Вы создадите function <b class=\"red\">find</b>, то при поиске по проекту Вам наверняка будут\r\n          попадаться участки кода, где используется Array.prototype.<b class=\"red\">find</b>(). Если вместо этого создать\r\n          function <b class=\"green\">findById</b>, это добавит уникальности и можно будет быстрее осуществить поиск.\r\n        </p>\r\n      </div>\r\n\r\n      <div class=\"column gap-30\">\r\n        <h2>Function Declaration or Arrow</h2>\r\n\r\n        <p>\r\n          Рекомендуется использовать Function Declaration, т.к. они более заметны в коде.\r\n          Также их можно вызывать в коде выше объявления. Это позволяет писать код \"снизу-вверх\".\r\n          При дальнейшем прочтении кода сверху-вниз, если правильно подобраны названия функций,\r\n          становится ясно что они выполняют, и не требуется \"лезть под капот\" (вниз кода) и смотреть,\r\n          что происходит внутри функций.\r\n        </p>\r\n\r\n        <ImageLabel img-src=\"js/js-6.webp\" is-bad />\r\n\r\n        <ImageLabel img-src=\"js/js-5.webp\" />\r\n      </div>\r\n\r\n      <div class=\"column gap-30\">\r\n        <h2>Arrow Function</h2>\r\n\r\n        <p>\r\n          Arrow Function aka Стрелочные функции хорошо использовать для:\r\n        </p>\r\n\r\n        <ul class=\"list\">\r\n          <li>однострочных вычислений;</li>\r\n          <li>использовании в качестве коллбэков;</li>\r\n          <li>если необходимо сразу вернуть объект из функции.</li>\r\n        </ul>\r\n\r\n        <ImageLabel img-src=\"js/js-4.webp\" is-bad />\r\n\r\n        <ImageLabel img-src=\"js/js-3.webp\" />\r\n      </div>\r\n\r\n      <div class=\"column gap-30\">\r\n        <h2>Switch</h2>\r\n\r\n        <p>\r\n          Если в условии встретилось много <b>if esle</b>,\r\n          возможно стоит воспользоваться конструкцией switch.\r\n          Важно помнить про особенности конструкции и при необходимости использовать break.\r\n        </p>\r\n\r\n        <ImageLabel img-src=\"js/js-7.webp\" is-bad />\r\n\r\n        <ImageLabel img-src=\"js/js-8.webp\" />\r\n      </div>\r\n\r\n      <div class=\"column gap-30\">\r\n        <h2>Loop</h2>\r\n\r\n        <p>\r\n          Циклы. Если не требуется проходить по всем элементам массива, предпочтительнее\r\n          использовать цикл <b class=\"green\">for</b> вместо <b class=\"red\">forEach</b>.\r\n          Так как он позволяет прерывать цикл в любой момент (<b class=\"green\">break</b>),\r\n          либо перейти на следующую итерацию (<b class=\"green\">continue</b>).\r\n          Таким образом можно ускорить выполнение кода, особенно если идет итерация по большому\r\n          количеству элементов, со сложными вычислениями.\r\n        </p>\r\n\r\n        <ImageLabel\r\n          label=\"catbear\"\r\n          img-src=\"cat-2.webp\"\r\n          is-gray\r\n        />\r\n      </div>\r\n\r\n      <div class=\"column gap-30\">\r\n        <h2>?.</h2>\r\n\r\n        <p>\r\n          Иногда бывает, что во время выполнения кода, по магическим причинам, в переменной не обнаруживается необходимое\r\n          свойство или значение. Эти моменты нужно предвидеть и учитывать при написании кода. Например можно использовать\r\n          <b class=\"green\">?.</b>\r\n        </p>\r\n      </div>\r\n\r\n      <div class=\"column gap-30\">\r\n        <h2>Async</h2>\r\n\r\n        <p>\r\n          Во время запросов на сервер обязательно обрабатывайте возможные ошибки.\r\n          Для этого рекомендуется использовать блок <b class=\"green\">try catch</b>.\r\n          Обязательно используйте <b class=\"green\">лоадер/спинер</b>, для показа пользователю,\r\n          что сейчас выполняется ожидание ответа с удаленного источника.\r\n        </p>\r\n\r\n        <div class=\"flex gap-20\">\r\n          <ButtonSubmit\r\n            text=\"GO REQUEST\"\r\n            class=\"button--green\"\r\n            :is-loading=\"isLoading\"\r\n            @click=\"sendRequestWithLoading\"\r\n          />\r\n\r\n          <ButtonSubmit\r\n            text=\"GO REQUEST\"\r\n            class=\"button--red\"\r\n            @click=\"sendMockRequest\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</template>\r\n\r\n<script setup>\r\nimport ImageLabel from '@/components/Image/ImageLabel'\r\nimport ButtonSubmit from '@/components/ui/button/ButtonSubmit'\r\nimport { useIsLoading } from '@/use/useIsLoading'\r\nimport { useMockRequest } from '@/use/useMockRequest'\r\n\r\nconst { isLoading, startLoading, finishLoading } = useIsLoading()\r\nconst { sendMockRequest } = useMockRequest()\r\n\r\nasync function sendRequestWithLoading () {\r\n  try {\r\n    startLoading()\r\n    await sendMockRequest()\r\n  } finally {\r\n    finishLoading()\r\n  }\r\n}\r\n</script>\r\n","import script from \"./JSView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./JSView.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["loader","ref","style","computed","width","value","offsetHeight","__exports__","useIsLoading","isLoading","startLoading","finishLoading","mockRequest","Promise","resolve","reject","setTimeout","Math","random","Error","useMockRequest","store","useStore","async","sendMockRequest","dispatch","error","message","sendRequestWithLoading"],"sourceRoot":""}